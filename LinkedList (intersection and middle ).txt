1)intersection of two linedkList 
public class Main1 {
    static class Node {
        int data;
        Node next;

        Node(int data) {
            this.data = data;
        }
    }

    public static Node insert(Node headA, Node headB) {
        Node tempA = headA;
        Node tempB = headB;
        int lengthA = 0;
        while (tempA != null) {
            lengthA++;
            tempA = tempA.next;
        }
        int lengthB = 0;
        while (tempB != null) {
            lengthB++;
            tempB = tempB.next;
        }
        tempA = headA;
        tempB = headB;
        if (lengthA > lengthB) {
            int step = lengthA - lengthB;
            for (int i = 0; i < step; i++) {
                tempA = tempA.next;
            }
        } else {
            int step = lengthB - lengthA;
            for (int i = 0; i < step; i++) {
                tempB = tempB.next;
            }
        }
        while (tempA != null && tempB != null) {
            if (tempA == tempB) {
                return tempA;
            }
            tempA = tempA.next;
            tempB = tempB.next;
        }

        return null;
    }

    public static void main(String[] args) {
        Node a = new Node(1);
        Node b = new Node(2);
        Node c = new Node(3);
        Node d = new Node(4);

        Node e = new Node(23);
        Node f = new Node(56);
        Node g = new Node(32);
        Node h = new Node(3);
        Node i = new Node(4);

        a.next = b;
        b.next = c;
        c.next = d;
        d.next = null;

        e.next = f;
        f.next = g;
        g.next = h;
        h.next = i;
        i.next = c;

        Node p = insert(a, e);
        System.out.println(p.data);
    }
}
--------------------------------------
2)middle of the linkedlist through loop and node 
public class Main 
{
    static class Node 
    {
        int data;
        Node next;
        Node(int data)
        {
            this.data=data;
        }
    }
    public static void get(Node head)
    {
        Node temp=head;
        int length=0;
        while(temp!=null)
        {
            length++;
            temp=temp.next;
        }
        if(length%2==0)
        {
            int mid=length/2;
            temp=head;
            for(int i=1;i<=mid;i++)
            {
                temp=temp.next;
            }
            System.out.println(temp.data+" ");
        }
        else if(length%2!=0)
        {
            int mid=length/2;
            temp=head;
            for(int i=1;i<=mid;i++)
            {
                temp=temp.next;
            }
            System.out.println(temp.data+" ");
        }
    }
    public static void main(String[] args)
    {
        Node head=new Node(1);
        Node b=new Node(2);
        Node c=new Node(3);
        Node d=new Node(4);
        Node e=new Node(47);
        Node tail=new Node(5);
        head.next=b;
        b.next=c;
        c.next=d;
        d.next=e;
        e.next=tail;
        tail.next=null;
        get(head);
    }
}
--------------------------------------
3)middle of the linked list through one traversal
public class Main 
{
    static class Node
    {
        int data;
        Node next;
        Node(int data)
        {
            this.data=data;
        }
    }
    static Node show(Node head)
    {
        Node slow=head;
        Node fast=head;
        while(fast!=null && fast.next!=null)
        {
            slow=slow.next;
            fast=fast.next.next;
        }
        return slow;
    }
    public static void main(String[] args)
    {
        Node a=new Node(1);
        Node b=new Node(2);
        Node c=new Node(3);
        Node d=new Node(4);
        Node e=new Node(5);
        a.next=b;
        b.next=c;
        c.next=d;
        d.next=e;
        e.next=null;
        Node q=show(a);
        System.out.println(q.data+" ");
    }
}
--------------------------------------